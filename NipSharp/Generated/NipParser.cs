//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../Nip.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NipSharp {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class NipParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, FLAG=6, AFFIX=7, MAXQUANTITY=8, 
		TIER=9, MERCTIER=10, FLOAT=11, INTEGER=12, IDENTIFIER=13, EQ=14, NEQ=15, 
		GT=16, GTE=17, LT=18, LTE=19, AND=20, OR=21, MUL=22, DIV=23, ADD=24, SUB=25, 
		WS=26, LINE_COMMENT=27, BLOCK_COMMENT=28;
	public const int
		RULE_flagProperty = 0, RULE_affixProperty = 1, RULE_stat = 2, RULE_property = 3, 
		RULE_maxQuantity = 4, RULE_tier = 5, RULE_mercTier = 6, RULE_number = 7, 
		RULE_numberOrAlias = 8, RULE_statExpr = 9, RULE_statRule = 10, RULE_propertyRule = 11, 
		RULE_additionalRule = 12, RULE_nipRule = 13, RULE_line = 14;
	public static readonly string[] ruleNames = {
		"flagProperty", "affixProperty", "stat", "property", "maxQuantity", "tier", 
		"mercTier", "number", "numberOrAlias", "statExpr", "statRule", "propertyRule", 
		"additionalRule", "nipRule", "line"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'('", "')'", "'#'", "'flag'", null, "'maxquantity'", 
		"'tier'", "'merctier'", null, null, null, "'=='", "'!='", "'>'", "'>='", 
		"'<'", "'<='", "'&&'", "'||'", "'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "FLAG", "AFFIX", "MAXQUANTITY", "TIER", 
		"MERCTIER", "FLOAT", "INTEGER", "IDENTIFIER", "EQ", "NEQ", "GT", "GTE", 
		"LT", "LTE", "AND", "OR", "MUL", "DIV", "ADD", "SUB", "WS", "LINE_COMMENT", 
		"BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nip.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static NipParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NipParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NipParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FlagPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAG() { return GetToken(NipParser.FLAG, 0); }
		public FlagPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flagProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlagProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlagPropertyContext flagProperty() {
		FlagPropertyContext _localctx = new FlagPropertyContext(Context, State);
		EnterRule(_localctx, 0, RULE_flagProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			Match(FLAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AffixPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFFIX() { return GetToken(NipParser.AFFIX, 0); }
		public AffixPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_affixProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAffixProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AffixPropertyContext affixProperty() {
		AffixPropertyContext _localctx = new AffixPropertyContext(Context, State);
		EnterRule(_localctx, 2, RULE_affixProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(AFFIX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NipParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(NipParser.INTEGER, 0); }
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NipParser.IDENTIFIER, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 6, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxQuantityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXQUANTITY() { return GetToken(NipParser.MAXQUANTITY, 0); }
		public MaxQuantityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxQuantity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxQuantity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxQuantityContext maxQuantity() {
		MaxQuantityContext _localctx = new MaxQuantityContext(Context, State);
		EnterRule(_localctx, 8, RULE_maxQuantity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(MAXQUANTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIER() { return GetToken(NipParser.TIER, 0); }
		public TierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TierContext tier() {
		TierContext _localctx = new TierContext(Context, State);
		EnterRule(_localctx, 10, RULE_tier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(TIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MercTierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERCTIER() { return GetToken(NipParser.MERCTIER, 0); }
		public MercTierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mercTier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMercTier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MercTierContext mercTier() {
		MercTierContext _localctx = new MercTierContext(Context, State);
		EnterRule(_localctx, 12, RULE_mercTier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(MERCTIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(NipParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(NipParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 14, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT || _la==INTEGER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOrAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NipParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(NipParser.INTEGER, 0); }
		public NumberOrAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOrAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOrAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOrAliasContext numberOrAlias() {
		NumberOrAliasContext _localctx = new NumberOrAliasContext(Context, State);
		EnterRule(_localctx, 16, RULE_numberOrAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatExprContext : ParserRuleContext {
		public StatExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statExpr; } }
	 
		public StatExprContext() { }
		public virtual void CopyFrom(StatExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatExprParenRuleContext : StatExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatExprContext statExpr() {
			return GetRuleContext<StatExprContext>(0);
		}
		public StatExprParenRuleContext(StatExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatExprParenRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatMulDivRuleContext : StatExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public StatExprContext[] statExpr() {
			return GetRuleContexts<StatExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatExprContext statExpr(int i) {
			return GetRuleContext<StatExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(NipParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(NipParser.DIV, 0); }
		public StatMulDivRuleContext(StatExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatMulDivRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatNameRuleContext : StatExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public StatNameRuleContext(StatExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatNameRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatNumberRuleContext : StatExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public StatNumberRuleContext(StatExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatNumberRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatAddSubRuleContext : StatExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public StatExprContext[] statExpr() {
			return GetRuleContexts<StatExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatExprContext statExpr(int i) {
			return GetRuleContext<StatExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(NipParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(NipParser.SUB, 0); }
		public StatAddSubRuleContext(StatExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatAddSubRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatExprContext statExpr() {
		return statExpr(0);
	}

	private StatExprContext statExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatExprContext _localctx = new StatExprContext(Context, _parentState);
		StatExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_statExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				_localctx = new StatNameRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 49;
				Match(T__0);
				State = 50;
				stat();
				State = 51;
				Match(T__1);
				}
				break;
			case FLOAT:
			case INTEGER:
				{
				_localctx = new StatNumberRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 53;
				number();
				}
				break;
			case T__2:
				{
				_localctx = new StatExprParenRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 54;
				Match(T__2);
				State = 55;
				statExpr(0);
				State = 56;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 68;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 66;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new StatMulDivRuleContext(new StatExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_statExpr);
						State = 60;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 61;
						((StatMulDivRuleContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((StatMulDivRuleContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 62;
						statExpr(6);
						}
						break;
					case 2:
						{
						_localctx = new StatAddSubRuleContext(new StatExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_statExpr);
						State = 63;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 64;
						((StatAddSubRuleContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((StatAddSubRuleContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 65;
						statExpr(5);
						}
						break;
					}
					} 
				}
				State = 70;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatRuleContext : ParserRuleContext {
		public StatRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statRule; } }
	 
		public StatRuleContext() { }
		public virtual void CopyFrom(StatRuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatParenRuleContext : StatRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatRuleContext statRule() {
			return GetRuleContext<StatRuleContext>(0);
		}
		public StatParenRuleContext(StatRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatParenRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatRelationalRuleContext : StatRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public StatExprContext[] statExpr() {
			return GetRuleContexts<StatExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatExprContext statExpr(int i) {
			return GetRuleContext<StatExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(NipParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(NipParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NipParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(NipParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(NipParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(NipParser.LTE, 0); }
		public StatRelationalRuleContext(StatRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatRelationalRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatLogicalRuleContext : StatRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public StatRuleContext[] statRule() {
			return GetRuleContexts<StatRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatRuleContext statRule(int i) {
			return GetRuleContext<StatRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(NipParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(NipParser.OR, 0); }
		public StatLogicalRuleContext(StatRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatLogicalRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatRuleContext statRule() {
		return statRule(0);
	}

	private StatRuleContext statRule(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatRuleContext _localctx = new StatRuleContext(Context, _parentState);
		StatRuleContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_statRule, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new StatRelationalRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 72;
				statExpr(0);
				State = 73;
				((StatRelationalRuleContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << GT) | (1L << GTE) | (1L << LT) | (1L << LTE))) != 0)) ) {
					((StatRelationalRuleContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 74;
				statExpr(0);
				}
				break;
			case 2:
				{
				_localctx = new StatParenRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 76;
				Match(T__2);
				State = 77;
				statRule(0);
				State = 78;
				Match(T__3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 87;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatLogicalRuleContext(new StatRuleContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_statRule);
					State = 82;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 83;
					((StatLogicalRuleContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
						((StatLogicalRuleContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 84;
					statRule(3);
					}
					} 
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PropertyRuleContext : ParserRuleContext {
		public PropertyRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyRule; } }
	 
		public PropertyRuleContext() { }
		public virtual void CopyFrom(PropertyRuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropParenRuleContext : PropertyRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyRuleContext propertyRule() {
			return GetRuleContext<PropertyRuleContext>(0);
		}
		public PropParenRuleContext(PropertyRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropParenRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropLogicalRuleContext : PropertyRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public PropertyRuleContext[] propertyRule() {
			return GetRuleContexts<PropertyRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyRuleContext propertyRule(int i) {
			return GetRuleContext<PropertyRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(NipParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(NipParser.OR, 0); }
		public PropLogicalRuleContext(PropertyRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropLogicalRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropRelationalRuleContext : PropertyRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberOrAliasContext numberOrAlias() {
			return GetRuleContext<NumberOrAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(NipParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(NipParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NipParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(NipParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(NipParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(NipParser.LTE, 0); }
		public PropRelationalRuleContext(PropertyRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropRelationalRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropAffixRuleContext : PropertyRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public AffixPropertyContext affixProperty() {
			return GetRuleContext<AffixPropertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberOrAliasContext numberOrAlias() {
			return GetRuleContext<NumberOrAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(NipParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(NipParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NipParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(NipParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(NipParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(NipParser.LTE, 0); }
		public PropAffixRuleContext(PropertyRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropAffixRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropFlagRuleContext : PropertyRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public FlagPropertyContext flagProperty() {
			return GetRuleContext<FlagPropertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberOrAliasContext numberOrAlias() {
			return GetRuleContext<NumberOrAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(NipParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(NipParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NipParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(NipParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(NipParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(NipParser.LTE, 0); }
		public PropFlagRuleContext(PropertyRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropFlagRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyRuleContext propertyRule() {
		return propertyRule(0);
	}

	private PropertyRuleContext propertyRule(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PropertyRuleContext _localctx = new PropertyRuleContext(Context, _parentState);
		PropertyRuleContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_propertyRule, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				_localctx = new PropFlagRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 91;
				Match(T__0);
				State = 92;
				flagProperty();
				State = 93;
				Match(T__1);
				State = 94;
				((PropFlagRuleContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << GT) | (1L << GTE) | (1L << LT) | (1L << LTE))) != 0)) ) {
					((PropFlagRuleContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 95;
				numberOrAlias();
				}
				break;
			case 2:
				{
				_localctx = new PropAffixRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 97;
				Match(T__0);
				State = 98;
				affixProperty();
				State = 99;
				Match(T__1);
				State = 100;
				((PropAffixRuleContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << GT) | (1L << GTE) | (1L << LT) | (1L << LTE))) != 0)) ) {
					((PropAffixRuleContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 101;
				numberOrAlias();
				}
				break;
			case 3:
				{
				_localctx = new PropRelationalRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 103;
				Match(T__0);
				State = 104;
				property();
				State = 105;
				Match(T__1);
				State = 106;
				((PropRelationalRuleContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << GT) | (1L << GTE) | (1L << LT) | (1L << LTE))) != 0)) ) {
					((PropRelationalRuleContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 107;
				numberOrAlias();
				}
				break;
			case 4:
				{
				_localctx = new PropRelationalRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 109;
				property();
				State = 110;
				((PropRelationalRuleContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << GT) | (1L << GTE) | (1L << LT) | (1L << LTE))) != 0)) ) {
					((PropRelationalRuleContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 111;
				numberOrAlias();
				}
				break;
			case 5:
				{
				_localctx = new PropParenRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 113;
				Match(T__2);
				State = 114;
				propertyRule(0);
				State = 115;
				Match(T__3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 124;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PropLogicalRuleContext(new PropertyRuleContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_propertyRule);
					State = 119;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 120;
					((PropLogicalRuleContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
						((PropLogicalRuleContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 121;
					propertyRule(3);
					}
					} 
				}
				State = 126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditionalRuleContext : ParserRuleContext {
		public AdditionalRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalRule; } }
	 
		public AdditionalRuleContext() { }
		public virtual void CopyFrom(AdditionalRuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AdditionalParenRuleContext : AdditionalRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalRuleContext additionalRule() {
			return GetRuleContext<AdditionalRuleContext>(0);
		}
		public AdditionalParenRuleContext(AdditionalRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalParenRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionalMercTierRuleContext : AdditionalRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public MercTierContext mercTier() {
			return GetRuleContext<MercTierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatExprContext statExpr() {
			return GetRuleContext<StatExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(NipParser.EQ, 0); }
		public AdditionalMercTierRuleContext(AdditionalRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalMercTierRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionalLogicalRuleContext : AdditionalRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalRuleContext[] additionalRule() {
			return GetRuleContexts<AdditionalRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalRuleContext additionalRule(int i) {
			return GetRuleContext<AdditionalRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(NipParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(NipParser.OR, 0); }
		public AdditionalLogicalRuleContext(AdditionalRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalLogicalRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionalTierRuleContext : AdditionalRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public TierContext tier() {
			return GetRuleContext<TierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatExprContext statExpr() {
			return GetRuleContext<StatExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(NipParser.EQ, 0); }
		public AdditionalTierRuleContext(AdditionalRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalTierRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionalMaxQuantityRuleContext : AdditionalRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public MaxQuantityContext maxQuantity() {
			return GetRuleContext<MaxQuantityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatExprContext statExpr() {
			return GetRuleContext<StatExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(NipParser.EQ, 0); }
		public AdditionalMaxQuantityRuleContext(AdditionalRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalMaxQuantityRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalRuleContext additionalRule() {
		return additionalRule(0);
	}

	private AdditionalRuleContext additionalRule(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditionalRuleContext _localctx = new AdditionalRuleContext(Context, _parentState);
		AdditionalRuleContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_additionalRule, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				_localctx = new AdditionalMaxQuantityRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 128;
				Match(T__0);
				State = 129;
				maxQuantity();
				State = 130;
				Match(T__1);
				State = 131;
				((AdditionalMaxQuantityRuleContext)_localctx).op = Match(EQ);
				State = 132;
				statExpr(0);
				}
				break;
			case 2:
				{
				_localctx = new AdditionalTierRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 134;
				Match(T__0);
				State = 135;
				tier();
				State = 136;
				Match(T__1);
				State = 137;
				((AdditionalTierRuleContext)_localctx).op = Match(EQ);
				State = 138;
				statExpr(0);
				}
				break;
			case 3:
				{
				_localctx = new AdditionalMercTierRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 140;
				Match(T__0);
				State = 141;
				mercTier();
				State = 142;
				Match(T__1);
				State = 143;
				((AdditionalMercTierRuleContext)_localctx).op = Match(EQ);
				State = 144;
				statExpr(0);
				}
				break;
			case 4:
				{
				_localctx = new AdditionalParenRuleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 146;
				Match(T__2);
				State = 147;
				additionalRule(0);
				State = 148;
				Match(T__3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 157;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AdditionalLogicalRuleContext(new AdditionalRuleContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_additionalRule);
					State = 152;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 153;
					((AdditionalLogicalRuleContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
						((AdditionalLogicalRuleContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 154;
					additionalRule(3);
					}
					} 
				}
				State = 159;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NipRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyRuleContext propertyRule() {
			return GetRuleContext<PropertyRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatRuleContext statRule() {
			return GetRuleContext<StatRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionalRuleContext additionalRule() {
			return GetRuleContext<AdditionalRuleContext>(0);
		}
		public NipRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nipRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNipRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NipRuleContext nipRule() {
		NipRuleContext _localctx = new NipRuleContext(Context, State);
		EnterRule(_localctx, 26, RULE_nipRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 160;
				propertyRule(0);
				}
			}

			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 163;
				Match(T__4);
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << FLOAT) | (1L << INTEGER))) != 0)) {
					{
					State = 164;
					statRule(0);
					}
				}

				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 167;
					Match(T__4);
					State = 169;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__0 || _la==T__2) {
						{
						State = 168;
						additionalRule(0);
						}
					}

					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NipRuleContext nipRule() {
			return GetRuleContext<NipRuleContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INipVisitor<TResult> typedVisitor = visitor as INipVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 28, RULE_line);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				nipRule();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return statExpr_sempred((StatExprContext)_localctx, predIndex);
		case 10: return statRule_sempred((StatRuleContext)_localctx, predIndex);
		case 11: return propertyRule_sempred((PropertyRuleContext)_localctx, predIndex);
		case 12: return additionalRule_sempred((AdditionalRuleContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statExpr_sempred(StatExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}
	private bool statRule_sempred(StatRuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool propertyRule_sempred(PropertyRuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool additionalRule_sempred(AdditionalRuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\xB6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '=', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x45', '\n', 
		'\v', '\f', '\v', '\xE', '\v', 'H', '\v', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', 'S', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', 'X', '\n', '\f', '\f', '\f', '\xE', '\f', '[', 
		'\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', 'x', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '}', '\n', '\r', '\f', '\r', '\xE', '\r', '\x80', '\v', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x99', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x9E', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xA1', '\v', '\xE', '\x3', '\xF', 
		'\x5', '\xF', '\xA4', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xA8', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xAC', '\n', '\xF', '\x5', '\xF', '\xAE', '\n', '\xF', '\x5', '\xF', 
		'\xB0', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB4', 
		'\n', '\x10', '\x3', '\x10', '\x2', '\x6', '\x14', '\x16', '\x18', '\x1A', 
		'\x11', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', '\x2', '\b', '\x3', '\x2', 
		'\xE', '\xF', '\x3', '\x2', '\r', '\xE', '\x3', '\x2', '\x18', '\x19', 
		'\x3', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x10', '\x15', '\x3', '\x2', 
		'\x16', '\x17', '\x2', '\xBB', '\x2', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', '$', '\x3', '\x2', '\x2', 
		'\x2', '\b', '&', '\x3', '\x2', '\x2', '\x2', '\n', '(', '\x3', '\x2', 
		'\x2', '\x2', '\f', '*', '\x3', '\x2', '\x2', '\x2', '\xE', ',', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '.', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x14', '<', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'R', '\x3', '\x2', '\x2', '\x2', '\x18', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		' ', '!', '\a', '\b', '\x2', '\x2', '!', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\a', '\t', '\x2', '\x2', '#', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '$', '%', '\t', '\x2', '\x2', '\x2', '%', '\a', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\a', '\xF', '\x2', '\x2', '\'', '\t', '\x3', '\x2', 
		'\x2', '\x2', '(', ')', '\a', '\n', '\x2', '\x2', ')', '\v', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\a', '\v', '\x2', '\x2', '+', '\r', '\x3', '\x2', 
		'\x2', '\x2', ',', '-', '\a', '\f', '\x2', '\x2', '-', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\t', '\x3', '\x2', '\x2', '/', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\t', '\x2', '\x2', '\x2', '\x31', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\b', '\v', '\x1', 
		'\x2', '\x33', '\x34', '\a', '\x3', '\x2', '\x2', '\x34', '\x35', '\x5', 
		'\x6', '\x4', '\x2', '\x35', '\x36', '\a', '\x4', '\x2', '\x2', '\x36', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x37', '=', '\x5', '\x10', '\t', '\x2', 
		'\x38', '\x39', '\a', '\x5', '\x2', '\x2', '\x39', ':', '\x5', '\x14', 
		'\v', '\x2', ':', ';', '\a', '\x6', '\x2', '\x2', ';', '=', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x32', '\x3', '\x2', '\x2', '\x2', '<', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x38', '\x3', '\x2', '\x2', '\x2', '=', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '>', '?', '\f', '\a', '\x2', '\x2', '?', '@', 
		'\t', '\x4', '\x2', '\x2', '@', '\x45', '\x5', '\x14', '\v', '\b', '\x41', 
		'\x42', '\f', '\x6', '\x2', '\x2', '\x42', '\x43', '\t', '\x5', '\x2', 
		'\x2', '\x43', '\x45', '\x5', '\x14', '\v', '\a', '\x44', '>', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x41', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\b', 
		'\f', '\x1', '\x2', 'J', 'K', '\x5', '\x14', '\v', '\x2', 'K', 'L', '\t', 
		'\x6', '\x2', '\x2', 'L', 'M', '\x5', '\x14', '\v', '\x2', 'M', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'O', '\a', '\x5', '\x2', '\x2', 'O', 'P', '\x5', 
		'\x16', '\f', '\x2', 'P', 'Q', '\a', '\x6', '\x2', '\x2', 'Q', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'I', '\x3', '\x2', '\x2', '\x2', 'R', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'Y', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\f', 
		'\x4', '\x2', '\x2', 'U', 'V', '\t', '\a', '\x2', '\x2', 'V', 'X', '\x5', 
		'\x16', '\f', '\x5', 'W', 'T', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', 
		'\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '\x17', '\x3', '\x2', '\x2', '\x2', '[', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\b', '\r', '\x1', '\x2', ']', 
		'^', '\a', '\x3', '\x2', '\x2', '^', '_', '\x5', '\x2', '\x2', '\x2', 
		'_', '`', '\a', '\x4', '\x2', '\x2', '`', '\x61', '\t', '\x6', '\x2', 
		'\x2', '\x61', '\x62', '\x5', '\x12', '\n', '\x2', '\x62', 'x', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\x3', '\x2', '\x2', '\x64', 
		'\x65', '\x5', '\x4', '\x3', '\x2', '\x65', '\x66', '\a', '\x4', '\x2', 
		'\x2', '\x66', 'g', '\t', '\x6', '\x2', '\x2', 'g', 'h', '\x5', '\x12', 
		'\n', '\x2', 'h', 'x', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\x3', 
		'\x2', '\x2', 'j', 'k', '\x5', '\b', '\x5', '\x2', 'k', 'l', '\a', '\x4', 
		'\x2', '\x2', 'l', 'm', '\t', '\x6', '\x2', '\x2', 'm', 'n', '\x5', '\x12', 
		'\n', '\x2', 'n', 'x', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x5', '\b', 
		'\x5', '\x2', 'p', 'q', '\t', '\x6', '\x2', '\x2', 'q', 'r', '\x5', '\x12', 
		'\n', '\x2', 'r', 'x', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '\x5', 
		'\x2', '\x2', 't', 'u', '\x5', '\x18', '\r', '\x2', 'u', 'v', '\a', '\x6', 
		'\x2', '\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', '\\', '\x3', 
		'\x2', '\x2', '\x2', 'w', '\x63', '\x3', '\x2', '\x2', '\x2', 'w', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'w', 'o', '\x3', '\x2', '\x2', '\x2', 'w', 
		's', '\x3', '\x2', '\x2', '\x2', 'x', '~', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\f', '\x4', '\x2', '\x2', 'z', '{', '\t', '\a', '\x2', '\x2', 
		'{', '}', '\x5', '\x18', '\r', '\x5', '|', 'y', '\x3', '\x2', '\x2', '\x2', 
		'}', '\x80', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x82', '\b', '\xE', '\x1', '\x2', '\x82', '\x83', '\a', '\x3', '\x2', 
		'\x2', '\x83', '\x84', '\x5', '\n', '\x6', '\x2', '\x84', '\x85', '\a', 
		'\x4', '\x2', '\x2', '\x85', '\x86', '\a', '\x10', '\x2', '\x2', '\x86', 
		'\x87', '\x5', '\x14', '\v', '\x2', '\x87', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x89', '\a', '\x3', '\x2', '\x2', '\x89', '\x8A', '\x5', 
		'\f', '\a', '\x2', '\x8A', '\x8B', '\a', '\x4', '\x2', '\x2', '\x8B', 
		'\x8C', '\a', '\x10', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\x14', '\v', 
		'\x2', '\x8D', '\x99', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', 
		'\x3', '\x2', '\x2', '\x8F', '\x90', '\x5', '\xE', '\b', '\x2', '\x90', 
		'\x91', '\a', '\x4', '\x2', '\x2', '\x91', '\x92', '\a', '\x10', '\x2', 
		'\x2', '\x92', '\x93', '\x5', '\x14', '\v', '\x2', '\x93', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\x5', '\x2', '\x2', '\x95', 
		'\x96', '\x5', '\x1A', '\xE', '\x2', '\x96', '\x97', '\a', '\x6', '\x2', 
		'\x2', '\x97', '\x99', '\x3', '\x2', '\x2', '\x2', '\x98', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x88', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x98', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\f', 
		'\x4', '\x2', '\x2', '\x9B', '\x9C', '\t', '\a', '\x2', '\x2', '\x9C', 
		'\x9E', '\x5', '\x1A', '\xE', '\x5', '\x9D', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA4', '\x5', '\x18', '\r', '\x2', '\xA3', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA7', '\a', '\a', '\x2', 
		'\x2', '\xA6', '\xA8', '\x5', '\x16', '\f', '\x2', '\xA7', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAB', '\a', '\a', '\x2', 
		'\x2', '\xAA', '\xAC', '\x5', '\x1A', '\xE', '\x2', '\xAB', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB4', '\x5', '\x1C', '\xF', '\x2', '\xB2', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '<', '\x44', '\x46', 'R', 'Y', 'w', '~', '\x98', '\x9F', 
		'\xA3', '\xA7', '\xAB', '\xAD', '\xAF', '\xB3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace NipSharp
